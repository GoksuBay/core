
_grub_lua_ver=24
_grub_ntldr_ver=21
_grub_915_ver=9

pkgname=('grub-common' 'grub-bios' 'grub-efi-x86_64')
pkgbase=grub
pkgver=2.00
pkgrel=4
url="https://www.gnu.org/software/grub/"
arch=('x86_64')
license=('GPL3')
makedepends=('xz' 'bdf-unifont' 'ttf-dejavu' 'python2' 'autogen' 'bdf-unifont'
             'texinfo' 'help2man' 'gettext' 'device-mapper' 'fuse' 'dosfstools' 'efibootmgr')

source=("http://ftp.gnu.org/gnu/grub/grub-${pkgver}.tar.xz"
        "http://sourceforge.net/projects/kaos/files/sources/grub/grub2_extras_lua_r${_grub_lua_ver}.tar.xz"
        "http://sourceforge.net/projects/kaos/files/sources/grub/grub2_extras_ntldr-img_r${_grub_ntldr_ver}.tar.xz"
        "http://sourceforge.net/projects/kaos/files/sources/grub/grub2_extras_915resolution_r${_grub_915_ver}.tar.xz"
        'grub_mkconfig_fixes.patch'
        'grub.default'
        'grub.cfg'
        'grub_bzr_export.sh'
        'grub-2.00-mkinitcpio-0.15.patch')

noextract=("grub2_extras_lua_r${_grub_lua_ver}.tar.xz"
           "grub2_extras_ntldr-img_r${_grub_ntldr_ver}.tar.xz"
           "grub2_extras_915resolution_r${_grub_915_ver}.tar.xz")

md5sums=('a1043102fbc7bcedbf53e7ee3d17ab91'
         '704ea9f250b6137f05fa0197fd07053a'
         '77f7d5f8ce395663cd7fff4d37099957'
         'a80e2b1d3bab778c3b6117d5a698992f'
         '0e596579198d0820550377c3d4077bd2'
         '2f372ff858b5ad59b8b7d34dee56cd67'
         '2039d39feb025d0803bd5d9e6d560dd6'
         'f343ed2340ebc86c427873641bb72419'
         'f0c3c72f965c4dd7f05b4f752992e699')
         
prepare() {
	cd "${srcdir}/grub-${pkgver}"
	## Apply fix for mkinitcpio 0.15 rw changes
	patch -p0 -i "${srcdir}/grub-2.00-mkinitcpio-0.15.patch"
}

_build_grub-common_and_bios() {

	## copy the source for building the common/bios package
	cp -r "${srcdir}/grub-${pkgver}" "${srcdir}/grub_bios-${pkgver}"
	cd "${srcdir}/grub_bios-${pkgver}"

	## Apply fixes to enable grub-mkconfig detect kernels and initramfs
	patch -p1 -i "${srcdir}/grub_mkconfig_fixes.patch"
	echo

	## fix unifont.bdf location so that grub-mkfont can create *.pf2 files
	sed 's|/usr/share/fonts/unifont|/usr/share/fonts/unifont /usr/share/fonts/misc|g' -i "${srcdir}/grub_bios-${pkgver}/configure.ac"

	## fix DejaVuSans.ttf location so that grub-mkfont can create *.pf2 files for starfield theme
	sed 's|/usr/share/fonts/dejavu|/usr/share/fonts/dejavu /usr/share/fonts/TTF|g' -i "${srcdir}/grub_bios-${pkgver}/configure.ac"
	
	sed -i -e '/gets is a security/d' "${srcdir}/grub-2.00/grub-core/gnulib/stdio.in.h"

	## add the grub-extra sources
	export GRUB_CONTRIB="${srcdir}/grub_bios-${pkgver}/grub-extras/"
	install -d "${srcdir}/grub_bios-${pkgver}/grub-extras"

	bsdtar xf "${srcdir}/grub2_extras_lua_r${_grub_lua_ver}.tar.xz" \
		-C "${srcdir}/grub_bios-${pkgver}/grub-extras"

	bsdtar xf "${srcdir}/grub2_extras_ntldr-img_r${_grub_ntldr_ver}.tar.xz" \
		-C "${srcdir}/grub_bios-${pkgver}/grub-extras"

	bsdtar xf "${srcdir}/grub2_extras_915resolution_r${_grub_915_ver}.tar.xz" \
		-C "${srcdir}/grub_bios-${pkgver}/grub-extras"

	## Requires python2
	# sed 's|python |python2 |g' -i "${srcdir}/grub_bios-${pkgver}/autogen.sh"

	## start the actual build process
	cd "${srcdir}/grub_bios-${pkgver}"
	./autogen.sh
	echo

	CFLAGS="" ./configure \
		--with-platform="pc" \
		--target="x86_64" \
		--host="${CARCH}-unknown-linux-gnu" \
		--enable-efiemu \
		--enable-mm-debug \
		--enable-nls \
		--enable-device-mapper \
		--enable-cache-stats \
		--enable-grub-mkfont \
		--enable-grub-mount \
		--prefix="/usr" \
		--bindir="/usr/bin" \
		--sbindir="/usr/sbin" \
		--mandir="/usr/share/man" \
		--infodir="/usr/share/info" \
		--datarootdir="/usr/share" \
		--sysconfdir="/etc" \
		--program-prefix="" \
		--with-bootdir="/boot" \
		--with-grubdir="grub" \
		--disable-werror \
		--disable-docs
	echo

	CFLAGS="" make
	echo

}

_build_grub-efi-x86_64() {

	## copy the source for building the efi package
	cp -r "${srcdir}/grub-${pkgver}" "${srcdir}/grub_efi-${pkgver}"
	cd "${srcdir}/grub_efi-${pkgver}"

	export GRUB_CONTRIB="${srcdir}/grub_efi-${pkgver}/grub-extras/"
	install -d "${srcdir}/grub_efi-${pkgver}/grub-extras"

	bsdtar xf "${srcdir}/grub2_extras_lua_r${_grub_lua_ver}.tar.xz" \
		-C "${srcdir}/grub_efi-${pkgver}/grub-extras"

	cd "${srcdir}/grub_efi-${pkgver}"
	./autogen.sh
	echo

	CFLAGS="" ./configure \
		--with-platform="efi" \
		--target="x86_64" \
		--host="${CARCH}-unknown-linux-gnu" \
		--disable-efiemu \
		--enable-mm-debug \
		--enable-nls \
		--enable-device-mapper \
		--enable-cache-stats \
		--enable-grub-mkfont \
		--enable-grub-mount \
		--prefix="/usr" \
		--bindir="/usr/bin" \
		--sbindir="/usr/sbin" \
		--mandir="/usr/share/man" \
		--infodir="/usr/share/info" \
		--datarootdir="/usr/share" \
		--sysconfdir="/etc" \
		--program-prefix="" \
		--with-bootdir="/boot" \
		--with-grubdir="grub" \
		--disable-werror
	echo

	CFLAGS="" make
	echo

}

build() {
	_EFIEMU="--enable-efiemu"

	_HOST="${CARCH}"

	cd "${srcdir}/grub-${pkgver}"
	# _get_locale_files
	
	sed -i -e '/gets is a security/d' "${srcdir}/grub-2.00/grub-core/gnulib/stdio.in.h"
	sed -i 's/grub-dev.texi//g' "${srcdir}/grub-2.00/docs/Makefile.am" || true

	_build_grub-common_and_bios
	echo

	_build_grub-efi-x86_64
	echo

}

package_grub-common() {

	pkgdesc="GNU GRand Unified Bootloader - Utilities and Common Files"
	depends=('sh' 'xz' 'freetype2' 'gettext' 'device-mapper' 'fuse')
	conflicts=('grub-legacy' 'grub')
	replaces=('grub2-common')
	provides=('grub2-common')
	backup=('boot/grub/grub.cfg' 'etc/default/grub' 'etc/grub.d/40_custom')
	optdepends=('libisoburn: provides xorriso for generating grub rescue iso using grub-mkrescue'
	            'os-prober: to detect other OSes when generating grub.cfg in BIOS systems'
	            'mtools: for grub-mkrescue FAT FS support')
	install="grub.install"
	options=('strip' 'purge' 'docs' 'zipman' '!emptydirs')

	cd "${srcdir}/grub_bios-${pkgver}"
	make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
	echo

	## install /etc/default/grub (used by grub-mkconfig)
	install -D -m0644 "${srcdir}/grub.default" "${pkgdir}/etc/default/grub"

	## install grub.cfg (needed so it doesn't get removed on upgrading because it was previously here)
	install -D -m0644 "${srcdir}/grub.cfg" "${pkgdir}/boot/grub/grub.cfg"

	# remove platform specific files
	rm -rf "${pkgdir}/usr/lib/grub/i386-pc/"

}

package_grub-bios() {

	pkgdesc="GNU GRand Unified Bootloader - x86_64 PC BIOS Modules"
	depends=("grub-common=${pkgver}")
	options=('!strip' '!emptydirs')
	replaces=('grub2-bios')
	provides=('grub2-bios')

	cd "${srcdir}/grub_bios-${pkgver}"
	make DESTDIR="${pkgdir}/" install
	echo

	## remove non platform-specific files
	rm -rf "${pkgdir}"/{boot,etc,usr/{share,bin,sbin}}

	## remove gdb debugging related files
	rm -f "${pkgdir}/usr/lib/grub/i386-pc"/*.module || true
	rm -f "${pkgdir}/usr/lib/grub/i386-pc"/*.image || true
	rm -f "${pkgdir}/usr/lib/grub/i386-pc"/{kernel.exec,gdb_grub,gmodule.pl} || true

}

package_grub-efi-x86_64() {

	pkgdesc="GNU GRand Unified Bootloader - x86_64 UEFI Modules"
	depends=("grub-common=${pkgver}" 'dosfstools' 'efibootmgr')
	options=('!strip' '!emptydirs')

	cd "${srcdir}/grub_efi-${pkgver}"
	make DESTDIR="${pkgdir}/" install
	echo

	## remove non platform-specific files
	rm -rf "${pkgdir}"/{boot,etc,usr/{share,bin,sbin}}

	## remove gdb debugging related files
	rm -f "${pkgdir}/usr/lib/grub/x86_64-efi"/*.module || true
	rm -f "${pkgdir}/usr/lib/grub/x86_64-efi"/*.image || true
	rm -f "${pkgdir}/usr/lib/grub/x86_64-efi"/{kernel.exec,gdb_grub,gmodule.pl} || true

}
